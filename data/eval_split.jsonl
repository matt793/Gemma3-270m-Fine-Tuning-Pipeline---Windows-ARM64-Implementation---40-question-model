{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "FIM: Complete the missing middle to implement a Python median.\n<fim_prefix>\ndef median(xs: list[float]) -> float:\n    n = len(xs)\n    if n == 0:\n        raise ValueError('empty')\n    ys = sorted(xs)\n    mid = n // 2\n<fim_suffix>\n    return m\n<fim_middle>\n"}, {"role": "assistant", "content": "**Explanation (brief):** Compute middle element(s) depending on parity.\n\n```python\nif n % 2 == 1:\n    m = ys[mid]\nelse:\n    m = (ys[mid-1] + ys[mid]) / 2.0\n```\n"}], "tags": ["python", "fim"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: A slow query filters `WHERE email LIKE '%@example.com'`. Suggest an index strategy and rewrite (PostgreSQL)."}, {"role": "assistant", "content": "**Explanation (brief):** Create an expression index on lower(email); compare with ILIKE and anchor.\n\n```sql\n-- Normalize case and enable suffix search by anchoring domain\nCREATE INDEX idx_users_email_lower ON users (lower(email));\n\n-- Query\nSELECT * FROM users WHERE lower(email) LIKE '%@example.com';\n```\n"}], "tags": ["sql", "postgres", "indexing"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `two_sum(nums, target)` returning indices i,j (i<j) whose values sum to target or (-1,-1) if none."}, {"role": "assistant", "content": "**Explanation (brief):** Single pass with hash map from valueâ†’index.\n\n```python\nfrom typing import List, Tuple\n\ndef two_sum(nums: List[int], target: int) -> Tuple[int, int]:\n    seen = {}\n    for j, x in enumerate(nums):\n        need = target - x\n        if need in seen:\n            return (seen[need], j)\n        seen[x] = j\n    return (-1, -1)\n```\n"}], "tags": ["python", "hashmap"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TypeScript: Implement a typed `EventEmitter<T extends Record<string, any[]>>`. Methods: on, off, emit."}, {"role": "assistant", "content": "**Explanation (brief):** Map event->Set<listener>; infer arg types per event key.\n\n```ts\nexport class EventEmitter<T extends Record<string, any[]>> {\n  private listeners: { [K in keyof T]?: Set<(...args: T[K]) => void> } = {};\n\n  on<K extends keyof T>(evt: K, fn: (...args: T[K]) => void) {\n    (this.listeners[evt] ??= new Set()).add(fn);\n  }\n  off<K extends keyof T>(evt: K, fn: (...args: T[K]) => void) {\n    this.listeners[evt]?.delete(fn);\n  }\n  emit<K extends keyof T>(evt: K, ...args: T[K]) {\n    for (const fn of this.listeners[evt] ?? []) fn(...args);\n  }\n}\n```\n"}], "tags": ["typescript", "events"], "difficulty": "medium"}
