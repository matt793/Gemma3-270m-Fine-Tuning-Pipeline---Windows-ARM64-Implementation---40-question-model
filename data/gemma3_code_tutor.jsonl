{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write a function `is_prime(n: int) -> bool` that returns True if n is prime. Handle n<=1. Add 3 quick doctests."}, {"role": "assistant", "content": "**Explanation (brief):** Trial division up to sqrt(n); reject n<=1 and even numbers >2.\n\n```python\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    step = 2\n    # check 6k±1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += step\n        step = 6 - step\n    return True\n\nif __name__ == \"__main__\":\n    # doctests\n    assert is_prime(2) is True\n    assert is_prime(1) is False\n    assert is_prime(49) is False\n```\n"}], "tags": ["python", "algorithms", "doctest"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `two_sum(nums, target)` returning indices i,j (i<j) whose values sum to target or (-1,-1) if none."}, {"role": "assistant", "content": "**Explanation (brief):** Single pass with hash map from value→index.\n\n```python\nfrom typing import List, Tuple\n\ndef two_sum(nums: List[int], target: int) -> Tuple[int, int]:\n    seen = {}\n    for j, x in enumerate(nums):\n        need = target - x\n        if need in seen:\n            return (seen[need], j)\n        seen[x] = j\n    return (-1, -1)\n```\n"}], "tags": ["python", "hashmap"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Given a nested list like [1,[2,3],[4,[5]]], implement `flatten(iterable)` that yields items depth-first."}, {"role": "assistant", "content": "**Explanation (brief):** Use recursion and `collections.abc.Iterable` while excluding `str/bytes`.\n\n```python\nfrom collections.abc import Iterable\n\ndef flatten(x):\n    for item in x:\n        if isinstance(item, Iterable) and not isinstance(item, (str, bytes)):\n            yield from flatten(item)\n        else:\n            yield item\n```\n"}], "tags": ["python", "generators"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Bugfix. The function should return a stable unique list preserving first occurrence order.\n\nBuggy code:\n```python\ndef unique(xs):\n    return list(set(xs))\n```\nFix it and add a quick test."}, {"role": "assistant", "content": "**Explanation (brief):** Sets lose order; keep a seen set and append on first occurrence.\n\n```python\nfrom typing import Iterable, List, Hashable\n\ndef unique(xs: Iterable[Hashable]) -> List[Hashable]:\n    seen = set()\n    out = []\n    for x in xs:\n        if x not in seen:\n            seen.add(x)\n            out.append(x)\n    return out\n\nif __name__ == \"__main__\":\n    assert unique([3,1,3,2,1,2]) == [3,1,2]\n```\n"}], "tags": ["python", "bugfix"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write `roman_to_int(s: str) -> int` for I,V,X,L,C,D,M up to 3999. Brief explanation only."}, {"role": "assistant", "content": "**Explanation (brief):** Sum values; subtract when a smaller numeral precedes a larger one.\n\n```python\ndef roman_to_int(s: str) -> int:\n    vals = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    total = 0\n    for i, ch in enumerate(s):\n        v = vals[ch]\n        if i+1 < len(s) and v < vals[s[i+1]]:\n            total -= v\n        else:\n            total += v\n    return total\n```\n"}], "tags": ["python", "parsing"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Add pytest tests for the function `is_anagram(a,b)` that returns True if two strings are anagrams ignoring case and spaces. Write 6 tests covering edge cases."}, {"role": "assistant", "content": "**Explanation (brief):** Focus on case/space insensitivity, unicode, empty strings, negatives.\n\n```python\n# test_is_anagram.py\nimport pytest\n\ndef test_simple_true():\n    assert is_anagram(\"listen\", \"silent\")\n\ndef test_spaces_case():\n    assert is_anagram(\"Dormitory\", \"Dirty room\")\n\ndef test_unicode():\n    assert is_anagram(\"résumé\", \"ésumér\")\n\ndef test_empty():\n    assert is_anagram(\"\", \"\")\n\ndef test_false_diff_lengths():\n    assert not is_anagram(\"ab\", \"aab\")\n\ndef test_false_same_letters_diff_counts():\n    assert not is_anagram(\"aabb\", \"ab\")\n```\n"}], "tags": ["python", "testing", "pytest"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript: Implement a `debounce(fn, delay)` returning a function that delays invocation until inactivity."}, {"role": "assistant", "content": "**Explanation (brief):** Reset a timer on each call; invoke on trailing edge.\n\n```js\nexport function debounce(fn, delay) {\n  let t = null;\n  return function(...args) {\n    clearTimeout(t);\n    t = setTimeout(() => fn.apply(this, args), delay);\n  };\n}\n```\n"}], "tags": ["javascript", "patterns"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TypeScript: Implement a typed `EventEmitter<T extends Record<string, any[]>>`. Methods: on, off, emit."}, {"role": "assistant", "content": "**Explanation (brief):** Map event->Set<listener>; infer arg types per event key.\n\n```ts\nexport class EventEmitter<T extends Record<string, any[]>> {\n  private listeners: { [K in keyof T]?: Set<(...args: T[K]) => void> } = {};\n\n  on<K extends keyof T>(evt: K, fn: (...args: T[K]) => void) {\n    (this.listeners[evt] ??= new Set()).add(fn);\n  }\n  off<K extends keyof T>(evt: K, fn: (...args: T[K]) => void) {\n    this.listeners[evt]?.delete(fn);\n  }\n  emit<K extends keyof T>(evt: K, ...args: T[K]) {\n    for (const fn of this.listeners[evt] ?? []) fn(...args);\n  }\n}\n```\n"}], "tags": ["typescript", "events"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "PowerShell: Write `Get-TopCpuProcess -Top 5` that lists the top N processes by CPU with Name, Id, CPU."}, {"role": "assistant", "content": "**Explanation (brief):** Sort by CPU descending, select top N.\n\n```powershell\nfunction Get-TopCpuProcess {\n    param([int]$Top = 5)\n    Get-Process | Sort-Object CPU -Descending | Select-Object -First $Top -Property Name, Id, CPU\n}\n```\n"}], "tags": ["powershell", "admin"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "PowerShell: Bugfix. This should restart a service with retries:\n```powershell\nparam([string]$Name)\nRestart-Service $Name -ErrorAction Stop\n```\nMake it robust: stop if running, start, retry up to 3 times with 2s delay."}, {"role": "assistant", "content": "**Explanation (brief):** Control flow with try/catch and Start-Sleep; verify status each loop.\n\n```powershell\nparam([Parameter(Mandatory)][string]$Name)\n\n$attempt = 0\nwhile ($attempt -lt 3) {\n    try {\n        $svc = Get-Service -Name $Name -ErrorAction Stop\n        if ($svc.Status -eq 'Running') { Stop-Service -Name $Name -Force -ErrorAction Stop }\n        Start-Service -Name $Name -ErrorAction Stop\n        Start-Sleep -Seconds 2\n        if ((Get-Service -Name $Name).Status -eq 'Running') { \n            Write-Output \"Service '$Name' restarted.\"\n            break\n        }\n    } catch {\n        Start-Sleep -Seconds 2\n    }\n    $attempt++\n    if ($attempt -eq 3) { throw \"Failed to restart service '$Name' after 3 attempts.\" }\n}\n```\n"}], "tags": ["powershell", "reliability"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: Show the user photo for the current user in an Image control. Keep it simple."}, {"role": "assistant", "content": "**Explanation (brief):** Use Office365Users.MyProfileV2() and pass the Id to UserPhotoV2.\n\n```powerfx\n// Image control: Image property\nOffice365Users.UserPhotoV2(Office365Users.MyProfileV2().id)\n```\n"}], "tags": ["powerfx", "powerapps"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: Filter a People directory gallery by a TextInput 'txtSearch'. If blank, show top 999. Otherwise search by query."}, {"role": "assistant", "content": "**Explanation (brief):** Use conditional to call SearchUser appropriately.\n\n```powerfx\nIf(\n    IsBlank(txtSearch.Text),\n    Office365Users.SearchUser({searchTerm: \"\", top: 999}),\n    Office365Users.SearchUser({searchTerm: txtSearch.Text, top: 999})\n)\n```\n"}], "tags": ["powerfx", "office365users"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: Given table `orders(order_id, customer_id, amount, created_at)`, return each customer's latest order row."}, {"role": "assistant", "content": "**Explanation (brief):** Use window function and filter row_number=1.\n\n```sql\nSELECT *\nFROM (\n  SELECT o.*, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY created_at DESC) AS rn\n  FROM orders o\n) t\nWHERE rn = 1;\n```\n"}], "tags": ["sql", "window-functions"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Code review: The function below parses CSV lines but fails on quoted commas. Suggest a safer approach and provide a corrected Python implementation using the stdlib.\n\n```python\ndef parse(line):\n    return [x.strip() for x in line.split(',')]\n```\n"}, {"role": "assistant", "content": "**Explanation (brief):** Use Python's `csv` module which handles quotes and escapes.\n\n```python\nimport csv\nfrom io import StringIO\nfrom typing import List\n\ndef parse(line: str) -> List[str]:\n    reader = csv.reader(StringIO(line))\n    return next(reader)\n```\n"}], "tags": ["python", "code-review"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TDD: Write pytest tests first for a new function `slugify(text: str) -> str` that lowercases, replaces non-alphanumerics with '-', squeezes repeats, and strips leading/trailing '-'. Provide 6 tests."}, {"role": "assistant", "content": "**Explanation (brief):** Cover spaces, punctuation, unicode, repeats, edges.\n\n```python\n# test_slugify.py\nimport pytest\n\ndef test_simple():\n    assert slugify(\"Hello World\") == \"hello-world\"\n\ndef test_punct():\n    assert slugify(\"Hi, there!!!\") == \"hi-there\"\n\ndef test_unicode():\n    assert slugify(\"Café Déjà Vu\") == \"caf-d-j-vu\"\n\ndef test_repeats():\n    assert slugify(\"a---b___c\") == \"a-b-c\"\n\ndef test_leading_trailing():\n    assert slugify(\"   a  \") == \"a\"\n\ndef test_empty():\n    assert slugify(\"\") == \"\"\n```\n"}], "tags": ["python", "tdd", "tests"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "FIM: Complete the missing middle to implement a Python median.\n<fim_prefix>\ndef median(xs: list[float]) -> float:\n    n = len(xs)\n    if n == 0:\n        raise ValueError('empty')\n    ys = sorted(xs)\n    mid = n // 2\n<fim_suffix>\n    return m\n<fim_middle>\n"}, {"role": "assistant", "content": "**Explanation (brief):** Compute middle element(s) depending on parity.\n\n```python\nif n % 2 == 1:\n    m = ys[mid]\nelse:\n    m = (ys[mid-1] + ys[mid]) / 2.0\n```\n"}], "tags": ["python", "fim"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript bugfix: The `once` helper should call the function at most once.\nBuggy:\n```js\nfunction once(fn){ let called=false; return (...a)=>{ if(called) fn(...a); called=true; return fn(...a);} }\n```\nFix it and add a small test snippet."}, {"role": "assistant", "content": "**Explanation (brief):** Only call when not called before; cache result.\n\n```js\nfunction once(fn){\n  let called = false, res;\n  return function(...args){\n    if (!called){ called = true; res = fn.apply(this, args); }\n    return res;\n  };\n}\n\n// quick test\nlet n = 0;\nconst incOnce = once(()=>++n);\nconsole.assert(incOnce() === 1);\nconsole.assert(incOnce() === 1);\nconsole.assert(n === 1);\n```\n"}], "tags": ["javascript", "bugfix", "testing"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: A slow query filters `WHERE email LIKE '%@example.com'`. Suggest an index strategy and rewrite (PostgreSQL)."}, {"role": "assistant", "content": "**Explanation (brief):** Create an expression index on lower(email); compare with ILIKE and anchor.\n\n```sql\n-- Normalize case and enable suffix search by anchoring domain\nCREATE INDEX idx_users_email_lower ON users (lower(email));\n\n-- Query\nSELECT * FROM users WHERE lower(email) LIKE '%@example.com';\n```\n"}], "tags": ["sql", "postgres", "indexing"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Git: Provide commands to create a new branch `feature/lora-finetune`, commit all changes with message 'WIP: LoRA config', and push to origin."}, {"role": "assistant", "content": "**Explanation (brief):** Standard 3-step flow.\n\n```bash\ngit checkout -b feature/lora-finetune\ngit add -A\ngit commit -m \"WIP: LoRA config\"\ngit push -u origin feature/lora-finetune\n```\n"}], "tags": ["git", "cli"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `safe_join(base: str, *paths: str) -> str` that prevents path traversal. Raise ValueError on escape."}, {"role": "assistant", "content": "**Explanation (brief):** Resolve and ensure final path is within base.\n\n```python\nfrom pathlib import Path\n\ndef safe_join(base: str, *paths: str) -> str:\n    base_p = Path(base).resolve()\n    final = base_p.joinpath(*paths).resolve()\n    if base_p not in final.parents and final != base_p:\n        raise ValueError(\"path traversal detected\")\n    return str(final)\n```\n"}], "tags": ["python", "security"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: In a Gallery of SharePoint list 'Tickets', show only items where Status = 'Open' and the text box 'txtAssignee' appears in the 'AssignedTo.DisplayName'."}, {"role": "assistant", "content": "**Explanation (brief):** Filter and use Search over a projection of the person field.\n\n```powerfx\nFilter(\n    Tickets,\n    Status = \"Open\" &&\n    If(\n        IsBlank(txtAssignee.Text),\n        true,\n        txtAssignee.Text in AssignedTo.DisplayName\n    )\n)\n```\n"}], "tags": ["powerfx", "filter"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript: Implement a `throttle(fn, interval)` that invokes at most once per interval (trailing edge only)."}, {"role": "assistant", "content": "**Explanation (brief):** Gate calls using a timestamp and timeout.\n\n```js\nexport function throttle(fn, interval){\n  let last = 0, t = null, lastArgs = null, ctx = null;\n  return function(...args){\n    const now = Date.now();\n    const invoke = () => { last = now; t = null; fn.apply(ctx, lastArgs); };\n    if (now - last >= interval){\n      ctx = this; lastArgs = args; invoke();\n    } else {\n      ctx = this; lastArgs = args;\n      clearTimeout(t);\n      t = setTimeout(invoke, interval - (now - last));\n    }\n  };\n}\n```\n"}], "tags": ["javascript", "patterns"], "difficulty": "medium"}
