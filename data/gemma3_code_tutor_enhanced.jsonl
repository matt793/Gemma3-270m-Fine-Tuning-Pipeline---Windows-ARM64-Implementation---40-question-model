{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write a function `is_prime(n: int) -> bool` that returns True if n is prime. Handle n<=1. Add 3 quick doctests."}, {"role": "assistant", "content": "**Explanation (brief):** Trial division up to sqrt(n); reject n<=1 and even numbers >2.\n\n```python\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    step = 2\n    # check 6k±1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += step\n        step = 6 - step\n    return True\n\nif __name__ == \"__main__\":\n    # doctests\n    assert is_prime(2) is True\n    assert is_prime(1) is False\n    assert is_prime(49) is False\n```\n"}], "tags": ["python", "algorithms", "doctest"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `two_sum(nums, target)` returning indices i,j (i<j) whose values sum to target or (-1,-1) if none."}, {"role": "assistant", "content": "**Explanation (brief):** Single pass with hash map from value→index.\n\n```python\nfrom typing import List, Tuple\n\ndef two_sum(nums: List[int], target: int) -> Tuple[int, int]:\n    seen = {}\n    for j, x in enumerate(nums):\n        need = target - x\n        if need in seen:\n            return (seen[need], j)\n        seen[x] = j\n    return (-1, -1)\n```\n"}], "tags": ["python", "hashmap"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Given a nested list like [1,[2,3],[4,[5]]], implement `flatten(iterable)` that yields items depth-first."}, {"role": "assistant", "content": "**Explanation (brief):** Use recursion and `collections.abc.Iterable` while excluding `str/bytes`.\n\n```python\nfrom collections.abc import Iterable\n\ndef flatten(x):\n    for item in x:\n        if isinstance(item, Iterable) and not isinstance(item, (str, bytes)):\n            yield from flatten(item)\n        else:\n            yield item\n```\n"}], "tags": ["python", "generators"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Bugfix. The function should return a stable unique list preserving first occurrence order.\n\nBuggy code:\n```python\ndef unique(xs):\n    return list(set(xs))\n```\nFix it and add a quick test."}, {"role": "assistant", "content": "**Explanation (brief):** Sets lose order; keep a seen set and append on first occurrence.\n\n```python\nfrom typing import Iterable, List, Hashable\n\ndef unique(xs: Iterable[Hashable]) -> List[Hashable]:\n    seen = set()\n    out = []\n    for x in xs:\n        if x not in seen:\n            seen.add(x)\n            out.append(x)\n    return out\n\nif __name__ == \"__main__\":\n    assert unique([3,1,3,2,1,2]) == [3,1,2]\n```\n"}], "tags": ["python", "bugfix"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write `roman_to_int(s: str) -> int` for I,V,X,L,C,D,M up to 3999. Brief explanation only."}, {"role": "assistant", "content": "**Explanation (brief):** Sum values; subtract when a smaller numeral precedes a larger one.\n\n```python\ndef roman_to_int(s: str) -> int:\n    vals = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    total = 0\n    for i, ch in enumerate(s):\n        v = vals[ch]\n        if i+1 < len(s) and v < vals[s[i+1]]:\n            total -= v\n        else:\n            total += v\n    return total\n```\n"}], "tags": ["python", "parsing"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Add pytest tests for the function `is_anagram(a,b)` that returns True if two strings are anagrams ignoring case and spaces. Write 6 tests covering edge cases."}, {"role": "assistant", "content": "**Explanation (brief):** Focus on case/space insensitivity, unicode, empty strings, negatives.\n\n```python\n# test_is_anagram.py\nimport pytest\n\ndef test_simple_true():\n    assert is_anagram(\"listen\", \"silent\")\n\ndef test_spaces_case():\n    assert is_anagram(\"Dormitory\", \"Dirty room\")\n\ndef test_unicode():\n    assert is_anagram(\"résumé\", \"ésumér\")\n\ndef test_empty():\n    assert is_anagram(\"\", \"\")\n\ndef test_false_diff_lengths():\n    assert not is_anagram(\"ab\", \"aab\")\n\ndef test_false_same_letters_diff_counts():\n    assert not is_anagram(\"aabb\", \"ab\")\n```\n"}], "tags": ["python", "testing", "pytest"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript: Implement a `debounce(fn, delay)` returning a function that delays invocation until inactivity."}, {"role": "assistant", "content": "**Explanation (brief):** Reset a timer on each call; invoke on trailing edge.\n\n```js\nexport function debounce(fn, delay) {\n  let t = null;\n  return function(...args) {\n    clearTimeout(t);\n    t = setTimeout(() => fn.apply(this, args), delay);\n  };\n}\n```\n"}], "tags": ["javascript", "patterns"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TypeScript: Implement a typed `EventEmitter<T extends Record<string, any[]>>`. Methods: on, off, emit."}, {"role": "assistant", "content": "**Explanation (brief):** Map event->Set<listener>; infer arg types per event key.\n\n```ts\nexport class EventEmitter<T extends Record<string, any[]>> {\n  private listeners: { [K in keyof T]?: Set<(...args: T[K]) => void> } = {};\n\n  on<K extends keyof T>(evt: K, fn: (...args: T[K]) => void) {\n    (this.listeners[evt] ??= new Set()).add(fn);\n  }\n  off<K extends keyof T>(evt: K, fn: (...args: T[K]) => void) {\n    this.listeners[evt]?.delete(fn);\n  }\n  emit<K extends keyof T>(evt: K, ...args: T[K]) {\n    for (const fn of this.listeners[evt] ?? []) fn(...args);\n  }\n}\n```\n"}], "tags": ["typescript", "events"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "PowerShell: Write `Get-TopCpuProcess -Top 5` that lists the top N processes by CPU with Name, Id, CPU."}, {"role": "assistant", "content": "**Explanation (brief):** Sort by CPU descending, select top N.\n\n```powershell\nfunction Get-TopCpuProcess {\n    param([int]$Top = 5)\n    Get-Process | Sort-Object CPU -Descending | Select-Object -First $Top -Property Name, Id, CPU\n}\n```\n"}], "tags": ["powershell", "admin"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "PowerShell: Bugfix. This should restart a service with retries:\n```powershell\nparam([string]$Name)\nRestart-Service $Name -ErrorAction Stop\n```\nMake it robust: stop if running, start, retry up to 3 times with 2s delay."}, {"role": "assistant", "content": "**Explanation (brief):** Control flow with try/catch and Start-Sleep; verify status each loop.\n\n```powershell\nparam([Parameter(Mandatory)][string]$Name)\n\n$attempt = 0\nwhile ($attempt -lt 3) {\n    try {\n        $svc = Get-Service -Name $Name -ErrorAction Stop\n        if ($svc.Status -eq 'Running') { Stop-Service -Name $Name -Force -ErrorAction Stop }\n        Start-Service -Name $Name -ErrorAction Stop\n        Start-Sleep -Seconds 2\n        if ((Get-Service -Name $Name).Status -eq 'Running') { \n            Write-Output \"Service '$Name' restarted.\"\n            break\n        }\n    } catch {\n        Start-Sleep -Seconds 2\n    }\n    $attempt++\n    if ($attempt -eq 3) { throw \"Failed to restart service '$Name' after 3 attempts.\" }\n}\n```\n"}], "tags": ["powershell", "reliability"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: Show the user photo for the current user in an Image control. Keep it simple."}, {"role": "assistant", "content": "**Explanation (brief):** Use Office365Users.MyProfileV2() and pass the Id to UserPhotoV2.\n\n```powerfx\n// Image control: Image property\nOffice365Users.UserPhotoV2(Office365Users.MyProfileV2().id)\n```\n"}], "tags": ["powerfx", "powerapps"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: Filter a People directory gallery by a TextInput 'txtSearch'. If blank, show top 999. Otherwise search by query."}, {"role": "assistant", "content": "**Explanation (brief):** Use conditional to call SearchUser appropriately.\n\n```powerfx\nIf(\n    IsBlank(txtSearch.Text),\n    Office365Users.SearchUser({searchTerm: \"\", top: 999}),\n    Office365Users.SearchUser({searchTerm: txtSearch.Text, top: 999})\n)\n```\n"}], "tags": ["powerfx", "office365users"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: Given table `orders(order_id, customer_id, amount, created_at)`, return each customer's latest order row."}, {"role": "assistant", "content": "**Explanation (brief):** Use window function and filter row_number=1.\n\n```sql\nSELECT *\nFROM (\n  SELECT o.*, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY created_at DESC) AS rn\n  FROM orders o\n) t\nWHERE rn = 1;\n```\n"}], "tags": ["sql", "window-functions"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Code review: The function below parses CSV lines but fails on quoted commas. Suggest a safer approach and provide a corrected Python implementation using the stdlib.\n\n```python\ndef parse(line):\n    return [x.strip() for x in line.split(',')]\n```\n"}, {"role": "assistant", "content": "**Explanation (brief):** Use Python's `csv` module which handles quotes and escapes.\n\n```python\nimport csv\nfrom io import StringIO\nfrom typing import List\n\ndef parse(line: str) -> List[str]:\n    reader = csv.reader(StringIO(line))\n    return next(reader)\n```\n"}], "tags": ["python", "code-review"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TDD: Write pytest tests first for a new function `slugify(text: str) -> str` that lowercases, replaces non-alphanumerics with '-', squeezes repeats, and strips leading/trailing '-'. Provide 6 tests."}, {"role": "assistant", "content": "**Explanation (brief):** Cover spaces, punctuation, unicode, repeats, edges.\n\n```python\n# test_slugify.py\nimport pytest\n\ndef test_simple():\n    assert slugify(\"Hello World\") == \"hello-world\"\n\ndef test_punct():\n    assert slugify(\"Hi, there!!!\") == \"hi-there\"\n\ndef test_unicode():\n    assert slugify(\"Café Déjà Vu\") == \"caf-d-j-vu\"\n\ndef test_repeats():\n    assert slugify(\"a---b___c\") == \"a-b-c\"\n\ndef test_leading_trailing():\n    assert slugify(\"   a  \") == \"a\"\n\ndef test_empty():\n    assert slugify(\"\") == \"\"\n```\n"}], "tags": ["python", "tdd", "tests"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "FIM: Complete the missing middle to implement a Python median.\n<fim_prefix>\ndef median(xs: list[float]) -> float:\n    n = len(xs)\n    if n == 0:\n        raise ValueError('empty')\n    ys = sorted(xs)\n    mid = n // 2\n<fim_suffix>\n    return m\n<fim_middle>\n"}, {"role": "assistant", "content": "**Explanation (brief):** Compute middle element(s) depending on parity.\n\n```python\nif n % 2 == 1:\n    m = ys[mid]\nelse:\n    m = (ys[mid-1] + ys[mid]) / 2.0\n```\n"}], "tags": ["python", "fim"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript bugfix: The `once` helper should call the function at most once.\nBuggy:\n```js\nfunction once(fn){ let called=false; return (...a)=>{ if(called) fn(...a); called=true; return fn(...a);} }\n```\nFix it and add a small test snippet."}, {"role": "assistant", "content": "**Explanation (brief):** Only call when not called before; cache result.\n\n```js\nfunction once(fn){\n  let called = false, res;\n  return function(...args){\n    if (!called){ called = true; res = fn.apply(this, args); }\n    return res;\n  };\n}\n\n// quick test\nlet n = 0;\nconst incOnce = once(()=>++n);\nconsole.assert(incOnce() === 1);\nconsole.assert(incOnce() === 1);\nconsole.assert(n === 1);\n```\n"}], "tags": ["javascript", "bugfix", "testing"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: A slow query filters `WHERE email LIKE '%@example.com'`. Suggest an index strategy and rewrite (PostgreSQL)."}, {"role": "assistant", "content": "**Explanation (brief):** Create an expression index on lower(email); compare with ILIKE and anchor.\n\n```sql\n-- Normalize case and enable suffix search by anchoring domain\nCREATE INDEX idx_users_email_lower ON users (lower(email));\n\n-- Query\nSELECT * FROM users WHERE lower(email) LIKE '%@example.com';\n```\n"}], "tags": ["sql", "postgres", "indexing"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Git: Provide commands to create a new branch `feature/lora-finetune`, commit all changes with message 'WIP: LoRA config', and push to origin."}, {"role": "assistant", "content": "**Explanation (brief):** Standard 3-step flow.\n\n```bash\ngit checkout -b feature/lora-finetune\ngit add -A\ngit commit -m \"WIP: LoRA config\"\ngit push -u origin feature/lora-finetune\n```\n"}], "tags": ["git", "cli"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `safe_join(base: str, *paths: str) -> str` that prevents path traversal. Raise ValueError on escape."}, {"role": "assistant", "content": "**Explanation (brief):** Resolve and ensure final path is within base.\n\n```python\nfrom pathlib import Path\n\ndef safe_join(base: str, *paths: str) -> str:\n    base_p = Path(base).resolve()\n    final = base_p.joinpath(*paths).resolve()\n    if base_p not in final.parents and final != base_p:\n        raise ValueError(\"path traversal detected\")\n    return str(final)\n```\n"}], "tags": ["python", "security"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: In a Gallery of SharePoint list 'Tickets', show only items where Status = 'Open' and the text box 'txtAssignee' appears in the 'AssignedTo.DisplayName'."}, {"role": "assistant", "content": "**Explanation (brief):** Filter and use Search over a projection of the person field.\n\n```powerfx\nFilter(\n    Tickets,\n    Status = \"Open\" &&\n    If(\n        IsBlank(txtAssignee.Text),\n        true,\n        txtAssignee.Text in AssignedTo.DisplayName\n    )\n)\n```\n"}], "tags": ["powerfx", "filter"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript: Implement a `throttle(fn, interval)` that invokes at most once per interval (trailing edge only)."}, {"role": "assistant", "content": "**Explanation (brief):** Gate calls using a timestamp and timeout.\n\n```js\nexport function throttle(fn, interval){\n  let last = 0, t = null, lastArgs = null, ctx = null;\n  return function(...args){\n    const now = Date.now();\n    const invoke = () => { last = now; t = null; fn.apply(ctx, lastArgs); };\n    if (now - last >= interval){\n      ctx = this; lastArgs = args; invoke();\n    } else {\n      ctx = this; lastArgs = args;\n      clearTimeout(t);\n      t = setTimeout(invoke, interval - (now - last));\n    }\n  };\n}\n```\n"}], "tags": ["javascript", "patterns"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement async `fetch_urls(urls: List[str]) -> List[str]` that fetches URLs concurrently with aiohttp. Handle errors gracefully."}, {"role": "assistant", "content": "**Explanation (brief):** Use aiohttp.ClientSession with asyncio.gather; return error message for failed requests.\n\n```python\nimport asyncio\nimport aiohttp\nfrom typing import List\n\nasync def fetch_url(session: aiohttp.ClientSession, url: str) -> str:\n    try:\n        async with session.get(url, timeout=10) as resp:\n            return await resp.text()\n    except Exception as e:\n        return f\"ERROR: {url} - {str(e)}\"\n\nasync def fetch_urls(urls: List[str]) -> List[str]:\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_url(session, url) for url in urls]\n        return await asyncio.gather(*tasks)\n```\n"}], "tags": ["python", "async", "aiohttp"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write a context manager `timer()` that prints elapsed time when exiting. Use it to time a sleep(2)."}, {"role": "assistant", "content": "**Explanation (brief):** Use __enter__/__exit__ with time.perf_counter for precise timing.\n\n```python\nimport time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer():\n    start = time.perf_counter()\n    try:\n        yield\n    finally:\n        elapsed = time.perf_counter() - start\n        print(f\"Elapsed: {elapsed:.3f}s\")\n\n# Usage\nwith timer():\n    time.sleep(2)\n```\n"}], "tags": ["python", "context-manager"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `validate_email(email: str) -> bool` using regex. Allow common formats but reject obviously invalid ones."}, {"role": "assistant", "content": "**Explanation (brief):** Basic regex for common email patterns; not RFC-compliant but practical.\n\n```python\nimport re\n\ndef validate_email(email: str) -> bool:\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email.strip())) if email else False\n```\n"}], "tags": ["python", "regex", "validation"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Create a `retry(max_attempts=3, delay=1)` decorator that retries on exceptions. Show usage on a flaky function."}, {"role": "assistant", "content": "**Explanation (brief):** Decorator with configurable attempts and delay; re-raise final exception.\n\n```python\nimport time\nimport functools\nfrom typing import Callable, Any\n\ndef retry(max_attempts: int = 3, delay: float = 1):\n    def decorator(func: Callable[..., Any]) -> Callable[..., Any]:\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    time.sleep(delay)\n            return None  # Should never reach here\n        return wrapper\n    return decorator\n\n@retry(max_attempts=3, delay=0.5)\ndef flaky_api_call():\n    import random\n    if random.random() < 0.7:  # 70% failure rate\n        raise ConnectionError(\"API temporarily down\")\n    return \"Success!\"\n```\n"}], "tags": ["python", "decorator", "error-handling"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement a simple LRU cache `LRUCache(capacity)` with get/put methods using OrderedDict."}, {"role": "assistant", "content": "**Explanation (brief):** Use OrderedDict for O(1) access; move_to_end for LRU behavior.\n\n```python\nfrom collections import OrderedDict\nfrom typing import Optional\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = OrderedDict()\n    \n    def get(self, key: int) -> Optional[int]:\n        if key not in self.cache:\n            return None\n        self.cache.move_to_end(key)  # Mark as recently used\n        return self.cache[key]\n    \n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)  # Remove least recently used\n```\n"}], "tags": ["python", "data-structures", "lru"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write a pandas function `analyze_sales(df)` that returns total sales by category and month. Assume columns: 'date', 'category', 'amount'."}, {"role": "assistant", "content": "**Explanation (brief):** Convert date to datetime, extract month, group by category and month, sum amounts.\n\n```python\nimport pandas as pd\nfrom typing import Dict, Any\n\ndef analyze_sales(df: pd.DataFrame) -> pd.DataFrame:\n    df = df.copy()\n    df['date'] = pd.to_datetime(df['date'])\n    df['month'] = df['date'].dt.to_period('M')\n    \n    result = (df.groupby(['category', 'month'])['amount']\n               .sum()\n               .reset_index()\n               .pivot(index='month', columns='category', values='amount')\n               .fillna(0))\n    \n    return result\n```\n"}], "tags": ["python", "pandas", "data-analysis"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TypeScript: Create a `useLocalStorage<T>(key, initialValue)` React hook that syncs state with localStorage."}, {"role": "assistant", "content": "**Explanation (brief):** Use useState and useEffect; handle JSON serialization and browser compatibility.\n\n```ts\nimport { useState, useEffect } from 'react';\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Error saving to localStorage:`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n```\n"}], "tags": ["typescript", "react", "hooks"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript: Implement Promise-based `sleep(ms)` function and use it in an async function that retries with exponential backoff."}, {"role": "assistant", "content": "**Explanation (brief):** Promise with setTimeout; exponential backoff multiplies delay by 2 each attempt.\n\n```js\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nasync function withExponentialBackoff(fn, maxAttempts = 5) {\n  let delay = 1000; // Start with 1 second\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (attempt === maxAttempts) throw error;\n      \n      console.log(`Attempt ${attempt} failed, retrying in ${delay}ms`);\n      await sleep(delay);\n      delay *= 2; // Exponential backoff\n    }\n  }\n}\n\n// Usage\nasync function flaky() {\n  if (Math.random() < 0.7) throw new Error('Random failure');\n  return 'Success!';\n}\n\nwithExponentialBackoff(flaky).then(console.log).catch(console.error);\n```\n"}], "tags": ["javascript", "async", "patterns"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "PowerShell: Write `Backup-Files -Source C:\\Data -Destination D:\\Backup -ExcludePatterns @('*.tmp', 'logs')` with progress and error handling."}, {"role": "assistant", "content": "**Explanation (brief):** Use robocopy for efficient copying; track progress and handle errors gracefully.\n\n```powershell\nfunction Backup-Files {\n    param(\n        [Parameter(Mandatory)][string]$Source,\n        [Parameter(Mandatory)][string]$Destination,\n        [string[]]$ExcludePatterns = @(),\n        [switch]$Mirror\n    )\n    \n    if (-not (Test-Path $Source)) {\n        throw \"Source path does not exist: $Source\"\n    }\n    \n    $excludeArgs = $ExcludePatterns | ForEach-Object { \"/XD\", $_, \"/XF\", $_ }\n    $mirrorArg = if ($Mirror) { \"/MIR\" } else { \"/E\" }\n    \n    $robocopyArgs = @(\n        $Source, $Destination, $mirrorArg, \"/R:3\", \"/W:10\", \"/NP\", \"/TEE\", \"/LOG+:backup.log\"\n    ) + $excludeArgs\n    \n    Write-Host \"Starting backup: $Source -> $Destination\" -ForegroundColor Green\n    \n    try {\n        & robocopy @robocopyArgs\n        if ($LASTEXITCODE -le 1) {\n            Write-Host \"Backup completed successfully\" -ForegroundColor Green\n        } else {\n            Write-Warning \"Backup completed with warnings (exit code: $LASTEXITCODE)\"\n        }\n    } catch {\n        Write-Error \"Backup failed: $($_.Exception.Message)\"\n        throw\n    }\n}\n```\n"}], "tags": ["powershell", "backup", "robocopy"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: Write a query to find the second highest salary from `employees(id, name, salary, department_id)` table."}, {"role": "assistant", "content": "**Explanation (brief):** Use DENSE_RANK to handle ties; filter for rank 2.\n\n```sql\nSELECT salary as second_highest_salary\nFROM (\n    SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) as rank\n    FROM employees\n) ranked\nWHERE rank = 2\nLIMIT 1;\n```\n"}], "tags": ["sql", "ranking", "window-functions"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Implement `binary_search(arr: List[int], target: int) -> int` returning index or -1. Include a simple test."}, {"role": "assistant", "content": "**Explanation (brief):** Classic binary search with left/right pointers; O(log n) time complexity.\n\n```python\nfrom typing import List\n\ndef binary_search(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 3, 5, 7, 9], 5) == 2\n    assert binary_search([1, 3, 5, 7, 9], 6) == -1\n    assert binary_search([], 1) == -1\n```\n"}], "tags": ["python", "algorithms", "binary-search"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "JavaScript: Create a `deepClone(obj)` function that handles nested objects, arrays, dates, and circular references."}, {"role": "assistant", "content": "**Explanation (brief):** Use WeakMap to track visited objects for circular reference detection; handle special types.\n\n```js\nfunction deepClone(obj, visited = new WeakMap()) {\n  if (obj === null || typeof obj !== 'object') return obj;\n  \n  if (visited.has(obj)) return visited.get(obj);\n  \n  if (obj instanceof Date) {\n    const cloned = new Date(obj.getTime());\n    visited.set(obj, cloned);\n    return cloned;\n  }\n  \n  if (obj instanceof Array) {\n    const cloned = [];\n    visited.set(obj, cloned);\n    obj.forEach((item, index) => {\n      cloned[index] = deepClone(item, visited);\n    });\n    return cloned;\n  }\n  \n  // Plain object\n  const cloned = {};\n  visited.set(obj, cloned);\n  Object.keys(obj).forEach(key => {\n    cloned[key] = deepClone(obj[key], visited);\n  });\n  return cloned;\n}\n```\n"}], "tags": ["javascript", "deep-clone", "algorithms"], "difficulty": "hard"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Python: Write `hash_password(password: str) -> str` and `verify_password(password: str, hashed: str) -> bool` using bcrypt."}, {"role": "assistant", "content": "**Explanation (brief):** Use bcrypt for secure password hashing; includes salt and configurable rounds.\n\n```python\nimport bcrypt\n\ndef hash_password(password: str) -> str:\n    salt = bcrypt.gensalt(rounds=12)\n    return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')\n\ndef verify_password(password: str, hashed: str) -> bool:\n    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\n\n# Usage example\nif __name__ == \"__main__\":\n    pw = \"my_secret_password\"\n    hashed = hash_password(pw)\n    print(f\"Hash: {hashed}\")\n    print(f\"Valid: {verify_password(pw, hashed)}\")\n    print(f\"Invalid: {verify_password('wrong', hashed)}\")\n```\n"}], "tags": ["python", "security", "bcrypt"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "PowerShell: Create `Test-PortConnectivity -ComputerName server01 -Port 443 -Timeout 5` that tests TCP connectivity."}, {"role": "assistant", "content": "**Explanation (brief):** Use Test-NetConnection for modern PowerShell; fallback to TcpClient for older versions.\n\n```powershell\nfunction Test-PortConnectivity {\n    param(\n        [Parameter(Mandatory)][string]$ComputerName,\n        [Parameter(Mandatory)][int]$Port,\n        [int]$Timeout = 5\n    )\n    \n    try {\n        if (Get-Command Test-NetConnection -ErrorAction SilentlyContinue) {\n            $result = Test-NetConnection -ComputerName $ComputerName -Port $Port -InformationLevel Quiet -WarningAction SilentlyContinue\n            return $result\n        } else {\n            # Fallback for older PowerShell versions\n            $tcpClient = New-Object System.Net.Sockets.TcpClient\n            $connect = $tcpClient.BeginConnect($ComputerName, $Port, $null, $null)\n            $wait = $connect.AsyncWaitHandle.WaitOne($Timeout * 1000, $false)\n            \n            if ($wait) {\n                try {\n                    $tcpClient.EndConnect($connect)\n                    return $true\n                } catch {\n                    return $false\n                } finally {\n                    $tcpClient.Close()\n                }\n            } else {\n                $tcpClient.Close()\n                return $false\n            }\n        }\n    } catch {\n        Write-Error \"Failed to test connectivity: $($_.Exception.Message)\"\n        return $false\n    }\n}\n```\n"}], "tags": ["powershell", "networking", "connectivity"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "SQL: Create a CTE to find customers who made orders in consecutive months. Table: `orders(customer_id, order_date)`."}, {"role": "assistant", "content": "**Explanation (brief):** Use CTE with LAG window function to check if previous order month was consecutive.\n\n```sql\nWITH monthly_orders AS (\n  SELECT \n    customer_id,\n    EXTRACT(YEAR FROM order_date) as year,\n    EXTRACT(MONTH FROM order_date) as month,\n    DATE_TRUNC('month', order_date) as order_month\n  FROM orders\n  GROUP BY customer_id, DATE_TRUNC('month', order_date)\n),\nconsecutive_check AS (\n  SELECT \n    customer_id,\n    order_month,\n    LAG(order_month) OVER (PARTITION BY customer_id ORDER BY order_month) as prev_month\n  FROM monthly_orders\n)\nSELECT DISTINCT customer_id\nFROM consecutive_check \nWHERE order_month = prev_month + INTERVAL '1 month';\n```\n"}], "tags": ["sql", "cte", "window-functions"], "difficulty": "hard"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Git: Show commands to squash the last 3 commits into one with a new message 'feat: implement user authentication'."}, {"role": "assistant", "content": "**Explanation (brief):** Use interactive rebase; change 'pick' to 'squash' for commits 2-3.\n\n```bash\n# Interactive rebase for last 3 commits\ngit rebase -i HEAD~3\n\n# In the editor, change:\n# pick abc1234 First commit\n# squash def5678 Second commit  \n# squash ghi9012 Third commit\n\n# Then in the commit message editor:\n# Replace all messages with:\nfeat: implement user authentication\n\n# Alternative one-liner approach:\ngit reset --soft HEAD~3\ngit commit -m \"feat: implement user authentication\"\n```\n"}], "tags": ["git", "rebase", "squash"], "difficulty": "easy"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "TypeScript: Create a generic `Result<T, E>` type for error handling without exceptions. Include helper functions."}, {"role": "assistant", "content": "**Explanation (brief):** Discriminated union type with helper functions for creation and unwrapping.\n\n```ts\ntype Result<T, E = Error> = \n  | { success: true; data: T }\n  | { success: false; error: E };\n\n// Helper functions\nconst Ok = <T>(data: T): Result<T, never> => ({ success: true, data });\nconst Err = <E>(error: E): Result<never, E> => ({ success: false, error });\n\nconst isOk = <T, E>(result: Result<T, E>): result is { success: true; data: T } => \n  result.success;\n\nconst isErr = <T, E>(result: Result<T, E>): result is { success: false; error: E } => \n  !result.success;\n\n// Usage example\nfunction divide(a: number, b: number): Result<number, string> {\n  return b === 0 ? Err(\"Division by zero\") : Ok(a / b);\n}\n\nconst result = divide(10, 2);\nif (isOk(result)) {\n  console.log(result.data); // 5\n} else {\n  console.error(result.error);\n}\n```\n"}], "tags": ["typescript", "error-handling", "generics"], "difficulty": "medium"}
{"messages": [{"role": "system", "content": "You are a concise, reliable coding assistant. Respond with correct, production-ready code and a brief explanation. Do not include chain-of-thought. Prefer small, composable functions, type hints when helpful, input validation, edge cases, and unit tests when asked."}, {"role": "user", "content": "Power Fx: Create a formula for a Gallery that shows items from SharePoint list 'Tasks' filtered by current user and sorted by priority (High, Medium, Low)."}, {"role": "assistant", "content": "**Explanation (brief):** Filter by current user email, then sort with custom priority order using Switch function.\n\n```powerfx\nSortByColumns(\n    Filter(\n        Tasks,\n        AssignedTo.Email = User().Email\n    ),\n    \"Priority\",\n    Switch(\n        Priority,\n        \"High\", 1,\n        \"Medium\", 2,\n        \"Low\", 3,\n        999\n    )\n)\n```\n"}], "tags": ["powerfx", "sharepoint", "sorting"], "difficulty": "medium"}
